{"version":3,"sources":["webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenExchangeKeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/RemoveKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/CleanKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/OriginalDevportalDetails.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","props","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","children","propTypes","PropTypes","node","isRequired","string","definition","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","useState","handleClose","handleChange","event","Button","variant","color","startIcon","onClick","disabled","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","formatMessage","value","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","Typography","shape","func","bool","defaultProps","useStyles","makeStyles","theme","code","padding","marginBottom","background","palette","grey","flex","command","encodeVisible","cursor","textDecoration","contentWrapper","display","ViewCurl","classes","keys","keyManagerConfig","jwtToken","defaultTokenEndpoint","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","onCopy","setTimeout","applyReal","tokenEndpoint","alias","Fragment","className","Tooltip","title","placement","text","injectIntl","reducer","newValue","field","TokenExchangeKeyConfiguration","urlCopied","setUrlCopied","showCS","setShowCS","showToken","setShowToken","showCurl","setShowCurl","showSecretGen","setShowSecretGen","notFound","setNotFound","isUpdating","setIsUpdating","isResidenceTokenAvailable","setIsResidenceTokenAvailable","initialState","tokenResponse","token","tokenScope","tokenValidityTime","accessTokenRequest","timeout","scopesSelected","keyType","subscriptionScopes","externalIDPToken","externalIDPTokenError","isKeyJWT","initialExecution","dispatch","useReducer","selectedApp","selectedTab","hashEnabled","fullScreen","appId","applicationPromise","Application","get","application","getKeys","newRequest","map","scope","catch","error","dialogHead","validateExternalIDPToken","values","selectedIdPType","type","ResourceNotFound","Loading","csCkKeys","size","Box","alignItems","Table","table","TableBody","TableRow","TableCell","component","leftCol","tableHeader","selectedIdpType","allowedAudience","iconStyle","IconButton","aria-label","root","iconButton","Icon","maxWidth","target","rows","FormHelperTextProps","helperText","helperTextError","textField","data-testid","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","isTokenExchange","CircularProgress","generateToken","response","console","log","accessToken","tokenScopes","validityTime","Alert","description","body","message","autoFocus","generateWrapper","bottomInfo","validating","summary","instanceOf","Object","keyRequest","callbackUrl","selectedGrantTypes","array","isKeysAvailable","any","setGenerateEnabled","updateKeyRequest","tokenType","owner","withStyles","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","button","marginLeft","quotaHelp","position","checkboxWrapper","checkboxWrapperColumn","flexWrap","flexDirection","whiteSpace","group","removeHelperPadding","fontSize","titleColumn","fontWeight","keyInfoTable","borderCollapse","borderBottom","stepLabel","alignSelf","stepContent","keyLabel","idpGrid","textAlign","input","avatar","height","border","copyIconStyle","hr","divCenter","lineHeight","getContrastText","paper","marginRight","tokenSection","marginTop","AppConfiguration","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","currentTarget","AppConfigLabels","defineMessages","application_access_token_expiry_time","user_access_token_expiry_time","refresh_token_expiry_time","id_token_expiry_time","pkceMandatory","pkceSupportPlain","bypassClientCredentials","AppConfigToolTips","getAppConfigLabel","getAppConfigToolTip","tooltip","useEffect","multiple","select","MenuItem","Array","isArray","formControl","InputLabel","Select","labelId","displayEmpty","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","onAdd","tag","chipRenderer","onDelete","filter","oldScope","style","float","KeyConfiguration","callbackHelper","setCallbackHelper","updateHasError","callbackError","mode","applicationConfiguration","availableGrantTypes","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","userInfoEndpoint","cloneDeep","newGrantTypes","keyManager","includes","Validation","validate","clonedAdditionalProperties","getPreviousValue","isPreviousValueSet","defaultValue","default","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","getGrantTypeDisplayList","Settings","FormControlLabel","control","placeholder","length","ViewKeys","that","elementName","data","preventDefault","keyMappingId","loadApplication","removeKeys","result","info","regenerateSecret","secretGenResponse","keyCopied","secretCopied","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","getGeneratedKeys","componentDidUpdate","prevProps","initialToken","initialValidityTime","initialScopes","accessTokenScopes","validityPeriod","tokenDetails","gutterBottom","viewKeyAndSecret","supportedGrantTypes","supportedGrantTypesUnchanged","ViewSecret","secret","generateAccessToken","find","a","handleClickOpen","handleClickOpenCurl","withRouter","keyState","states","REJECTED","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","RemmoveKeys","handleClickRemove","aria-describedby","CleanKeys","TabPanel","index","other","role","hidden","p","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","selectedGrantsByDefault","gt","push","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","selectdKM","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","isExchangeTokenError","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","nextProps","nextKeyType","prevKeyType","confItem","isTokenExchangeEnabled","isEnabled","keymanager","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","isKeyManagerAllowed","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","getUser","Progress","isResidentKeyManagerTokensAvailable","has","residentKMs","cleanUpInfoText","cleanUpButton","AppBar","handleTabChange","indicatorColor","textColor","scrollButtons","displayName","tabPanel","subTitle","ml","m","enableTokenHashing","setValidating","warningIcon","kmName","RadioGroup","Radio","main","keyConfigWrapper","muiFormGroupRoot","appContent","genericDisplayDialog","handleClick","heading","caption","buttonText","OriginalDevportalDetails","originalDevPortalUrl","Paper","elevation","Link","rel","href","originalDevPortalLink","launchIcon","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","app","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","classNames","activeLink","colSpan","selectedWrapper","A200","withTheme","Credentials","api","applicationsAvailable","context","subscriptionRequest","newSubscriptionRequest","throttlingPolicyList","tiers","tierName","expanded","apiType","Api","isSubscribing","subscribe","updateData","history","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","isSetAllorResidentKeyManagers","md","lg","advertiseInfo","advertised","handleExpandClick","titleSub","isSubscriptionAvailable","pointerEvents","addLinkWrapper","RouterLink","descWrapper","GenericDisplayDialog","goToWizard","generateCredentialWrapper","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","contextType","ApiContext","custom","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","borderRadius"],"mappings":"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","file":"APICredentials.0f20877a1935035ca39e.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyManagerConfig,\n        jwtToken,\n        defaultTokenEndpoint,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    if (keyManagerConfig.alias === null ) {\n        return (\n            <React.Fragment>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help'\n                        defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                    />\n                </Typography>\n\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=password&username=Username&password=Password\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <CopyToClipboard\n                                text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                                onCopy={onCopy}\n                            >\n                                <FileCopy color='secondary'/>\n                            </CopyToClipboard>\n                        </Tooltip>\n                    </div>\n                </div>\n                <Typography>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                        defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                    />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.code}>\n                        <div>\n                            <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                            <span className={classes.command}> -d </span>{' '}\n                            {'\"grant_type=client_credentials\"'}\n                        </div>\n                        <div>\n                            <span className={classes.command}> -H </span>\n                            {'\"Authorization: Basic'}\n                            <a onClick={applyReal} className={classes.encodeVisible}>\n                                {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                            </a>\n                            {'\"'}\n                        </div>\n                    </div>\n                    <div>\n                        <Tooltip\n                            title={\n                                tokenCopied\n                                    ? intl.formatMessage({\n                                        defaultMessage: 'Copied',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                    })\n                                    : intl.formatMessage({\n                                        defaultMessage: 'Copy to clipboard',\n                                        id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                    })\n                            }\n                            placement='right'\n                        >\n                            <CopyToClipboard\n                                text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                                onCopy={onCopy}\n                            >\n                                <FileCopy color='secondary'/>\n                            </CopyToClipboard>\n                        </Tooltip>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    } else {\n        if (consumerKey === false) {\n            return (\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.error'\n                            defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                             order to use the token Exchange Approach. '\n                        />\n                    </Typography>\n                )\n        } else {\n            return (\n                <React.Fragment>\n                    <Typography>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.ViewCurl.TokenExchange.help'\n                            defaultMessage='The following cURL command shows how to generate an access token using the\n                        token exchange grant type'\n                        />\n                    </Typography>\n\n                    <div className={classes.contentWrapper}>\n                        <div className={classes.code}>\n                            <div>\n                                <span className={classes.command}>curl -k -X POST </span> {defaultTokenEndpoint}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\"'}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" '}\n                                <span className={classes.command}> -d </span>{' '}\n                                {'\"subject_token=\"'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + jwtToken : 'jwtToken'}\n                                </a>\n                            </div>\n                            <div>\n                                <span className={classes.command}> -H </span>\n                                {'\"Authorization: Basic'}\n                                <a onClick={applyReal} className={classes.encodeVisible}>\n                                    {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                                </a>\n                                {'\"'}\n                            </div>\n                        </div>\n                        <div>\n                            <Tooltip\n                                title={\n                                    tokenCopied\n                                        ? intl.formatMessage({\n                                            defaultMessage: 'Copied',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                        })\n                                        : intl.formatMessage({\n                                            defaultMessage: 'Copy to clipboard',\n                                            id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                        })\n                                }\n                                placement='right'\n                            >\n                                <CopyToClipboard\n                                    text={`curl -k -X POST ${defaultTokenEndpoint} -d ` +\n                                    '\"grant_type=urn:ietf:params:oauth:grant-type:token-exchange\" -d ' +\n                                    '\"subject_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                    '\"requested_token_type=urn:ietf:params:oauth:token-type:jwt\" -d ' +\n                                    `\"subject_token=${jwtToken}\"  -H ` +\n                                    `\"Authorization: Basic ${bas64Encoded}\"`}\n                                    onCopy={onCopy}\n                                >\n                                    <FileCopy color='secondary'/>\n                                </CopyToClipboard>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n    jwtToken: PropTypes.string,\n    defaultTokenEndpoint: PropTypes.string,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {useReducer, useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport {withStyles} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Link from \"@material-ui/core/Link\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport ViewCurl from \"AppComponents/Shared/AppsAndKeys/ViewCurl\";\nimport ViewToken from \"AppComponents/Shared/AppsAndKeys/ViewToken\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Application from \"AppData/Application\";\nimport Loading from \"AppComponents/Base/Loading/Loading\";\nimport Alert from \"AppComponents/Shared/Alert\";\nimport Tokens from \"AppComponents/Shared/AppsAndKeys/Tokens\";\nimport {TableBody, TableCell, TableRow} from \"@material-ui/core\";\nimport Table from \"@material-ui/core/Table\";\n\nconst styles = (theme) => ({\n        FormControl: {\n            paddingTop: 0,\n            paddingBottom: theme.spacing(2),\n            paddingLeft: 0,\n            width: '100%',\n        },\n        FormControlOdd: {\n            padding: theme.spacing(2),\n            width: '100%',\n        },\n        button: {\n            marginLeft: theme.spacing(1),\n        },\n        quotaHelp: {\n            position: 'relative',\n        },\n        checkboxWrapper: {\n            display: 'flex',\n        },\n        generateWrapper: {\n            padding: '10px 0px',\n            marginLeft: theme.spacing(1.25),\n        },\n        checkboxWrapperColumn: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexDirection: 'row',\n            whiteSpace: 'nowrap',\n        },\n        group: {\n            flexDirection: 'row',\n        },\n        removeHelperPadding: {\n            '& p': {\n                margin: '8px 0px',\n            },\n        },\n        iconStyle: {\n            cursor: 'pointer',\n            padding: '0 0 0 10px',\n        },\n        iconButton: {\n            padding: '0 0 0 10px',\n            '& .material-icons': {\n                fontSize: 16,\n            },\n        },\n        titleColumn: {\n            width: 150,\n            fontWeight: 500,\n        },\n        keyInfoTable: {\n            marginBottom: 20,\n            borderCollapse: 'collapse',\n            '& td': {\n                paddingBottom: 5,\n                borderBottom: 'solid 1px #cccc',\n            },\n        },\n        leftCol: {\n            width: 180,\n        },\n        stepLabel: {\n            color: \"#5567d5\",\n            alignSelf: 'center',\n        },\n        stepContent: {\n            color: '#1D2028',\n            fontSize: '0.75rem',\n        },\n        keyLabel: {\n            color: '#222228',\n            fontSize: '0.75rem',\n            marginLeft: theme.spacing(1)\n        },\n        idpGrid: {\n            textAlign: 'left',\n            margin: theme.spacing(0),\n            alignSelf: 'center',\n        },\n        helperTextError: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: 10.5\n        },\n        input: {\n            marginLeft: theme.spacing(1),\n            flex: 1,\n        },\n        avatar: {\n            width: 30,\n            height: 30,\n            background: 'transparent',\n            border: `solid 1px ${theme.palette.grey[300]}`\n        },\n        copyIconStyle: {\n            cursor: 'pointer',\n            margin: '-10px 0',\n            padding: '0 0 0 5px',\n            '& .material-icons': {\n                fontSize: 18,\n                color: '#9c9c9c',\n            },\n        },\n        hr: {\n            border: 'solid 1px #efefef',\n        },\n        divCenter: {\n            alignSelf: 'center',\n            width: 180\n        },\n        tableHeader: {\n            borderBottom: 'none',\n\n        },\n        helperText: {\n            marginLeft: 0,\n            color: '#8D91A3',\n            lineHeight: 1.6,\n            maxWidth: 410\n        },\n        dialogWrapper: {\n            '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n            },\n        },\n        margin: {\n            marginRight: theme.spacing(2),\n        },\n        tokenSection: {\n            marginTop: 0,\n            marginBottom: theme.spacing(0.5),\n        },\n        inputWrapper: {\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            '& span, & h5, & label, & td, & li, & div, & input': {\n                color: theme.palette.getContrastText(theme.palette.background.paper),\n            },\n        },\n        bottomInfo: {\n            fontSize: 12,\n            marginBottom: '10px',\n        }\n    }\n);\n\nfunction reducer(state, newValue) {\n    const {field, value} = newValue;\n    switch (field) {\n        case 'tokenResponse':\n        case 'token':\n        case 'tokenScopes':\n        case 'tokenValidityTime':\n        case 'accessTokenRequest':\n        case 'subscriptionScopes':\n        case 'externalIDPToken':\n        case 'externalIDPTokenError':\n        case 'isKeyJWT':\n        case 'initialExecution':\n            return {...state, [field]: value};\n        case 'all':\n            return value;\n        default:\n            return newValue;\n    }\n}\n\n\n/**\n *\n *\n * @class TokenExchangeKeyConfiguration\n * @extends {React.Component}\n */\nconst TokenExchangeKeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [showCS, setShowCS] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [showToken, setShowToken] = useState(false);\n    const [showCurl, setShowCurl] = useState(false);\n    const [showSecretGen, setShowSecretGen] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [isResidenceTokenAvailable, setIsResidenceTokenAvailable] = useState(true);\n\n\n    const [initialState] = useState({\n        tokenResponse: '',\n        token: '',\n        tokenScope: '',\n        tokenValidityTime: '',\n        accessTokenRequest: {\n            timeout: 3600,\n            scopesSelected: [],\n            keyType: '',\n        },\n        subscriptionScopes: [],\n        externalIDPToken: '',\n        externalIDPTokenError: '',\n        isKeyJWT: false,\n        initialExecution: true,\n    });\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const {\n        tokenResponse, accessTokenRequest, externalIDPToken, externalIDPTokenError, subscriptionScopes,\n        tokenValidityTime, token, isKeyJWT, initialExecution\n    } = state\n\n    const intl = useIntl();\n\n    const {\n        classes,  keyManagerConfig,\n        defaultTokenEndpoint, selectedApp, selectedTab, selectedApp: {hashEnabled}, keys, fullScreen, keyType\n    } = props;\n\n    let appId;\n    if (selectedApp) {\n        appId = selectedApp.appId || selectedApp.value;\n    }\n\n    const applicationPromise = Application.get(appId);\n\n    if (initialExecution) {\n        applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = {...accessTokenRequest, keyType};\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => {\n                            return scope.key;\n                        });\n                    dispatch({field: 'accessTokenRequest', value: newRequest});\n                    dispatch({field: 'subscriptionScopes', value: subscriptionScopes});\n                    dispatch({field: 'initialExecution', value: false});\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                }\n                dispatch({field: 'initialExecution', value: false});\n            });\n    }\n\n    const generateAccessToken = () => {\n        setIsUpdating(true);\n        applicationPromise.then((application) => application.generateToken(\n            selectedTab,\n            accessTokenRequest.keyType,\n            accessTokenRequest.timeout,\n            accessTokenRequest.scopesSelected,\n            true,\n            externalIDPToken,\n        ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                setShowToken(true);\n                dispatch({field: 'tokenResponse', value: response});\n                dispatch({field: 'token', value: response.accessToken});\n                dispatch({field: 'tokenScopes', value: response.tokenScopes})\n                dispatch({field: 'tokenValidityTime', value: response.validityTime})\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const {status} = error;\n                if (status === 404) {\n                    setNotFound(true)\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                setIsUpdating(false);\n                const {response} = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    let dialogHead;\n    if (showCurl) {\n        dialogHead = 'Get CURL to Generate Access Token';\n    } else if (showSecretGen) {\n        dialogHead = 'Generate Consumer Secret';\n    } else {\n        dialogHead = 'Generate Access Token';\n    }\n\n    const validateExternalIDPToken = (token) => {\n        if (token === \"\") {\n            return (\n                <FormattedMessage\n                    id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.empty.helperText'\n                    defaultMessage={`{selectedIdPType} token cannot be empty`}\n                    values={{selectedIdPType: keyManagerConfig.type}}\n\n                />\n            );\n        }\n        {\n            return \"\";\n        }\n    };\n\n    const onExternalIDPTokenChange = (event) => {\n        const externalIDPToken = event.target.value;\n        dispatch({field: 'externalIDPTokenError', value: validateExternalIDPToken(externalIDPToken)})\n        dispatch({field: 'externalIDPToken', value: externalIDPToken})\n    };\n\n\n    if (notFound) {\n        return <ResourceNotFound/>;\n    }\n    if (!keys) {\n        return <Loading/>;\n    }\n\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    const updateAccessTokenRequest = (accessTokenRequest) => {\n        dispatch({field: 'accessTokenRequest', value: accessTokenRequest})\n    }\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    const handleClose = () => {\n        setOpen(false);\n        setShowCurl(false);\n        setShowSecretGen(false);\n        dispatch({field: \"isKeyJWT\", value: false})\n\n    };\n\n    /**\n     * Handle on open of dialog for generating access token\n     * */\n    const handleClickOpen = () => {\n            setOpen(true);\n    };\n    /**\n     * Handle on open of dialog for generating access token and get curl\n     * */\n    const handleClickOpenCurl = () => {\n        setOpen(true);\n        setShowCurl(true)\n    };\n\n\n    const csCkKeys = keys.size > 0 && keys.get(\"Resident Key Manager\") && (keys.get(\"Resident Key Manager\").keyType === keyType)\n        && keys.get(\"Resident Key Manager\") || false;\n    const consumerKey = csCkKeys && csCkKeys.consumerKey;\n    const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n    return (\n        <>\n                    <Box display='flex' alignItems='center'>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.externalIdp.tokenGeneration.step1\"\n                                            defaultMessage=\"Step 1:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.step1.description'\n                                            defaultMessage={`Obtain an access token from {selectedIdpType}. `}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.audience'\n                                            defaultMessage='Use the audience value \"{allowedAudience}\", '\n                                            values={{allowedAudience: <b>{keyManagerConfig.alias}</b>}}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint'\n                                            defaultMessage='Token Endpoint'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenEndpoint.value'\n                                            defaultMessage={'{tokenEndpoint}'}\n                                            values={{tokenEndpoint: keyManagerConfig.tokenEndpoint}}\n                                        />\n\n                                        <Tooltip\n                                            title={\n                                                urlCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.TokenExchangeKeyConfiguration.copy.to.clipboard',\n                                                    })\n                                            }\n                                            placement='right'\n                                            className={classes.iconStyle}\n                                        >\n                                            <CopyToClipboard\n                                                text={keyManagerConfig.tokenEndpoint}\n                                                onCopy={onCopy}\n                                            >\n                                                <IconButton\n                                                    aria-label='Copy to clipboard'\n                                                    classes={{root: classes.iconButton}}\n                                                >\n                                                    <Icon color='secondary'>file_copy</Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row'\n                                               className={[classes.leftCol, classes.tableHeader]}>\n                                        <FormattedMessage\n                                            id=\"application.productionKeys.oAuth.tokenGeneration.step2\"\n                                            defaultMessage=\"Step 2:\"\n                                        />\n                                    </TableCell>\n                                    <TableCell className={classes.tableHeader}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.tokenGeneration.step2.description'\n                                            defaultMessage='Obtain test token'\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell component='th' scope='row' className={classes.leftCol}>\n                                        <FormattedMessage\n                                            id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token'\n                                            defaultMessage={`{selectedIdpType} Token`}\n                                            values={{selectedIdpType: keyManagerConfig.type}}\n\n                                        />\n                                        <span className={classes.error}> *</span>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Box maxWidth={600}>\n                                            <TextField\n                                                id='external-idp-token'\n                                                onChange={onExternalIDPTokenChange}\n                                                size=\"small\"\n                                                fullWidth\n                                                rows={1}\n                                                value={externalIDPToken}\n                                                variant=\"outlined\"\n                                                error={externalIDPTokenError !== \"\"}\n                                                FormHelperTextProps={{\n                                                    className: classes.helperText\n                                                }}\n                                                helperText={externalIDPTokenError === \"\" ?\n                                                    externalIDPTokenError :\n                                                    <div className={classes.helperTextError}>\n                                                        <p> {externalIDPTokenError} </p>\n                                                    </div>\n                                                }\n                                                className={classes.textField}\n                                                data-testid='external-idp-token'\n                                            />\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Box>\n                    <Box>\n                        <div className={classes.inputWrapper}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Dialog\n                                        fullScreen={fullScreen}\n                                        open={open}\n                                        onClose={handleClose}\n                                        aria-labelledby='responsive-dialog-title'\n                                        className={classes.dialogWrapper}\n                                    >\n                                        <DialogTitle id='responsive-dialog-title'>\n                                            {dialogHead}\n                                        </DialogTitle>\n                                        <DialogContent>\n                                            {(!showCurl && !isKeyJWT && !showSecretGen) && (\n                                                <DialogContentText>\n                                                    {(!showToken && isResidenceTokenAvailable) && (\n                                                        <Tokens\n                                                            updateAccessTokenRequest={updateAccessTokenRequest}\n                                                            accessTokenRequest={accessTokenRequest}\n                                                            subscriptionScopes={subscriptionScopes}\n                                                        />\n                                                    )}\n                                                    {(!showToken && !isResidenceTokenAvailable) && (\n                                                        <React.Fragment>\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id='Shared.AppsAndKeys.ViewCurl.error'\n                                                                    defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                                />\n                                                            </Typography>\n                                                        </React.Fragment>\n                                                    )}\n                                                    {showToken &&\n                                                    <ViewToken token={{...tokenResponse, isOauth: true}} isResidenceTokenAvailable={isResidenceTokenAvailable} isTokenExchange />}\n                                                </DialogContentText>\n                                            )}\n                                            {showCurl && (\n                                                <DialogContentText>\n                                                    <ViewCurl\n                                                        keys={{consumerKey, consumerSecret}}\n                                                        keyType={keyType}\n                                                        jwtToken={externalIDPToken}\n                                                        keyManagerConfig={keyManagerConfig}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                    />\n                                                </DialogContentText>\n                                            )}\n                                        </DialogContent>\n                                        <DialogActions>\n                                            {isUpdating && <CircularProgress size={24}/>}\n                                            {(!showToken && !showCurl && !showSecretGen && isResidenceTokenAvailable) && (\n                                                <Button onClick={generateAccessToken} color='primary'\n                                                        disabled={isUpdating}>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                                        defaultMessage='Generate'\n                                                    />\n                                                </Button>\n                                            )}\n                                            <Button onClick={handleClose} color='primary' autoFocus>\n                                                <FormattedMessage\n                                                    id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                    defaultMessage='Close'\n                                                />\n                                            </Button>\n                                        </DialogActions>\n                                    </Dialog>\n                                    <div className={classes.generateWrapper}>\n                                        <Grid className={classes.bottomInfo}>\n                                            <FormattedMessage\n                                                id='application.productionKeys.oAuth.externalIdp.tokenGeneration.token.description'\n                                                defaultMessage={`In Exchange token flow, A JWT token has to be generated from the {selectedIdpType}\n                                             idp and then exchange for a token with the Resident Key Manager which can used to invoke APIs`}\n                                                values={{selectedIdpType: keyManagerConfig.type}}\n                                            />\n                                        </Grid>\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpen}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                        <Button\n                                            id='curl-to-generate-access-token-btn'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={handleClickOpenCurl}\n                                            disabled={externalIDPTokenError || externalIDPToken === ''}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                                defaultMessage='CURL to Generate Access Token'\n                                            />\n                                        </Button>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </div>\n                    </Box>\n            </>\n    );\n}\nTokenExchangeKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    fullScreen: false,\n    summary: false,\n};\nTokenExchangeKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    defaultTokenEndpoint: PropTypes.string,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }),\n};\n\n\nexport default withStyles(styles)(TokenExchangeKeyConfiguration);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\nimport ChipInput from 'material-ui-chip-input';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n\n    const AppConfigLabels = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time',\n          defaultMessage: 'Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time',\n          defaultMessage: 'User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time',\n           defaultMessage: 'Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time',\n           defaultMessage: 'Id Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain',\n            defaultMessage: 'Support PKCE Plain text',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials',\n            defaultMessage: 'Public client',\n        }\n    });\n\n    const AppConfigToolTips = defineMessages({\n        application_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.application.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type Application Access Token Expiry Time',\n        },\n        user_access_token_expiry_time: {\n          id: 'Shared.AppsAndKeys.AppConfiguration.user.access.token.expiry.time.tooltip',\n          defaultMessage: 'Type User Access Token Expiry Time',\n        },\n        refresh_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.refresh.token.expiry.time.tooltip',\n           defaultMessage: 'Type Refresh Token Expiry Time',\n        },\n        id_token_expiry_time: {\n           id: 'Shared.AppsAndKeys.AppConfiguration.id.token.expiry.time.tooltip',\n           defaultMessage: 'Type ID Token Expiry Time',\n        },\n        pkceMandatory: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.mandatory.tooltip',\n            defaultMessage: 'Enable PKCE',\n          },\n        pkceSupportPlain: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.pkce.support.plain.tooltip',\n            defaultMessage: 'S256 is recommended, plain text too can be used.',\n        },\n        bypassClientCredentials: {\n            id: 'Shared.AppsAndKeys.AppConfiguration.bypass.client.credentials.tooltip',\n            defaultMessage: 'Allow authentication without the client secret.',\n        }\n    });\n\n    const getAppConfigLabel = () => {\n        return AppConfigLabels[config.name]\n            ? props.intl.formatMessage(AppConfigLabels[config.name])\n            : config.label\n    }\n\n    const getAppConfigToolTip = () => {\n        return AppConfigToolTips[config.name]\n            ? props.intl.formatMessage(AppConfigToolTips[config.name])\n            : config.tooltip\n    }\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n\n    const setCheckboxValue = () => {\n        return ( typeof selectedValue === 'string' && selectedValue === 'true' )\n            || ( typeof selectedValue !== 'string' && selectedValue === true );\n    }\n\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {getAppConfigLabel()}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n\n                        {config.type === 'select' && config.multiple === false ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                select\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            >\n                                {config.values.map(key => (\n                                    <MenuItem key={key} value={key}>\n                                        {key}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                            <>\n                                <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                    <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                    <Select\n                                        labelId=\"multi-select-label\"\n                                        id=\"multi-select-outlined\"\n                                        margin='dense'\n                                        displayEmpty\n                                        name={config.name}\n                                        multiple\n                                        value={selectedValue}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        input={<Input id='multi-select-outlined'/>}\n                                        renderValue={selected => (\n                                            <div className={classes.chips}>\n                                                {selected.map(value => (\n                                                    <Chip key={value} label={value} className={classes.chip}/>\n                                                ))}\n                                            </div>\n                                        )}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {getAppConfigToolTip()}\n                                            </Typography>\n                                        }\n                                        label={getAppConfigLabel()}\n                                    >\n                                        {config.values.map(key => (\n                                            <MenuItem key={key} value={key}>\n                                                <Checkbox checked={selectedValue.indexOf(key) > -1}/>\n                                                <ListItemText primary={key}/>\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n\n                                <Typography variant='caption'>\n                                    {getAppConfigToolTip()}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input' && config.multiple === true) ? (\n                            <>\n                            <ChipInput\n                                value={selectedValue}\n                                fullWidth\n                                variant='outlined'\n                                id=\"multi-input-outlined\"\n                                label={config.label}\n                                onAdd={(tag) => {\n                                    const e = { target: { name:config.name, value: [...selectedValue, tag] } }\n                                    handleAppRequestChange(e)\n                                }\n                                }\n                                chipRenderer={({ value }, key) => (\n                                    <Chip\n                                        key={key}\n                                        size='small'\n                                        label={value}\n                                        onDelete={() => {\n                                            const e = { target: { name:config.name, value:selectedValue.filter (\n                                            (oldScope)=> oldScope !== value) } }\n                                            handleAppRequestChange(e);\n                                        }}\n                                        style={{\n                                            margin: '0 8px 12px 0',\n                                            float: 'left',\n                                        }}\n                                    />\n                                )}\n                                style={{ display: 'flex' }}\n                            />\n                            <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            </>\n                        ) : (config.type === 'input') ? (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (config.type === 'checkbox') ? (\n                            <Checkbox\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                checked={setCheckboxValue()}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        ) : (\n                            <TextField\n                                classes={{\n                                    root: classes.removeHelperPadding,\n                                }}\n                                fullWidth\n                                id={config.name}\n                                label={getAppConfigLabel()}\n                                value={selectedValue}\n                                name={config.name}\n                                onChange={e => handleAppRequestChange(e)}\n                                helperText={\n                                    <Typography variant='caption'>\n                                        {getAppConfigToolTip()}\n                                    </Typography>\n                                }\n                                margin='dense'\n                                variant='outlined'\n                                disabled={!isUserOwner}\n                            />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,mode,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = (callbackUrlLocal) => {\n        if (callbackUrlLocal === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else if (Validation.url.validate(callbackUrl).error) {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.url.error.text',\n            }));\n        }else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors(currentTarget.value);\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                if(currentTarget.type === 'checkbox') {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.checked + \"\";\n                } else {\n                    clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                }\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {mode !== 'MAPPED' && (<><TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn} id='grant-types'>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                        data-testid={key}\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                        </>)}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n    mode: null,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport API from 'AppData/api';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        this.getGeneratedKeys();\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    getGeneratedKeys = () => {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of remove keys\n     * */\n    handleClickRemove = (keyMappingId) => {\n        const { selectedTab, keyType, intl, loadApplication } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                return application.removeKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then((result) => {\n                if (result) {\n                    loadApplication();\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.cleanupall.success',\n                        defaultMessage: 'Application keys removed successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                throw (error);\n            });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    Alert.error(error.description\n                        || intl.formatMessage({\n                            id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                            defaultMessage: 'Error occurred when generating Access Token',\n                        }));\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            classes, intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton\n                                                    aria-label='Copy to clipboard'\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                                id='visibility-toggle-btn'\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={\n                                                    secretCopied\n                                                        ? intl.formatMessage({\n                                                            defaultMessage: 'Copied',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                        })\n                                                        : intl.formatMessage({\n                                                            defaultMessage: 'Copy to clipboard',\n                                                            id: 'Shared.AppsAndKeys.ViewKeys.copy.to.clipboard',\n                                                        })\n                                                }\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                className={classes.button}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes, mode,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead;\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n\n        // Get the grant types for the generated keys\n        const { supportedGrantTypes: supportedGrantTypesUnchanged } = keys.get(selectedTab);\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || (isKeyJWT && tokenDetails))}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button\n                                        onClick={this.generateAccessToken}\n                                        color='primary'\n                                        id='generate-access-token-generate-btn'\n                                        disabled={isUpdating}\n                                    >\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button\n                                    onClick={this.handleClose}\n                                    id='generate-access-token-close-btn'\n                                    color='primary'\n                                    autoFocus\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {(keyManagerConfig.enableTokenGeneration && supportedGrantTypesUnchanged\n                                    && supportedGrantTypesUnchanged.find((a) => a.includes('client_credentials')))\n                                    && mode !== 'MAPPED'\n                                    && (\n                                        <Button\n                                            id='generate-access-token-oauth2'\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!supportedGrantTypesUnchanged.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    id='curl-to-generate-access-token-btn'\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {supportedGrantTypesUnchanged && !supportedGrantTypesUnchanged.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n    mode: null,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n    mode: PropTypes.string,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(ViewKeys)));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2023, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction RemmoveKeys(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        keyMappingId, keys, selectedTab, handleClickRemove,\n    } = props;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleRemove = () => {\n        handleClickRemove(keyMappingId);\n    };\n\n    return (\n        <div>\n            <Button\n                id='remove-generated-keys'\n                variant='outlined'\n                color='secondary'\n                startIcon={<DeleteIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewKeys.remove.keys'\n                    defaultMessage='Remove Keys'\n                />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.title'\n                        defaultMessage='Do you really want to remove keys?'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.content'\n                            defaultMessage='This will remove the key entries stored in devportal,\n                            gateway as well as in the service provider.'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={handleRemove} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default RemmoveKeys;\n","/*\n * Copyright (c) 2023, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction CleanKeys(props) {\n    const [open, setOpen] = React.useState(false);\n    const {\n        keyMappingId, keys, selectedTab, handleClickRemove,\n    } = props;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleClean = () => {\n        handleClickRemove(keyMappingId);\n    };\n\n    return (\n        <div>\n            <Button\n                id='remove-generated-keys'\n                variant='outlined'\n                color='secondary'\n                startIcon={<DeleteIcon />}\n                onClick={handleClickOpen}\n            >\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewKeys.remove.keys'\n                    defaultMessage='Remove Keys'\n                />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.title'\n                        defaultMessage='Do you really want to remove keys?'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.clean.keys.dialog.content'\n                            defaultMessage='This will remove only the key entries stored in devportal,\n                            gateway and will not remove the service proveder keys.'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={handleClean} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Applications.Listing.DeleteConfirmation.remove.keys.dialog.Delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default CleanKeys;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport TokenExchangeKeyConfiguration from 'AppComponents/Shared/AppsAndKeys/TokenExchangeKeyConfiguration';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport {\n    Dialog,\n    DialogActions, DialogContent,\n    DialogContentText,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TableCell,\n} from '@material-ui/core';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\nimport RemmoveKeys from './RemoveKeys';\nimport CleanKeys from './CleanKeys';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n        marginRight: theme.spacing(2),\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n            mode: null,\n            tokenType: 'DIRECT',\n            isExchangeTokenError: false,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    /**\n     * Handle onCLick of remove keys\n     * */\n    handleClickRemove = (keyMappingId) => {\n        const {\n            selectedTab, keyType, intl,\n        } = this.props;\n        this.application\n            .then((application) => {\n                return application.removeKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then((result) => {\n                if (result) {\n                    this.loadApplication();\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.cleanupall.success',\n                        defaultMessage: 'Application keys removed successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                throw (error);\n            });\n    };\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    isTokenExchangeEnabled() {\n        const { keyManagers } = this.state;\n        let isEnabled = false;\n        if (keyManagers && keyManagers.length > 1) {\n            keyManagers.map((keymanager) => {\n                if (keymanager.tokenType === 'EXCHANGED' || keymanager.tokenType === 'BOTH') {\n                    isEnabled = true;\n                }\n            });\n        }\n        return isEnabled;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n        const selectedGrantsByDefault = [];\n        if (availableGrantTypes.find((gt) => gt === 'password')) {\n            selectedGrantsByDefault.push('password');\n        }\n        if (availableGrantTypes.find((gt) => gt === 'client_credentials')) {\n            selectedGrantsByDefault.push('client_credentials');\n        }\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const {\n                callbackUrl, supportedGrantTypes, additionalProperties, mode,\n            } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                    || selectedGrantsByDefault,\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({\n                keyRequest: newRequest,\n                selectedTab: newSelectedTab,\n                mode,\n                importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n            });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: selectedGrantsByDefault,\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n                importDisabled: false,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType, intl } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const {\n                            callbackUrl, supportedGrantTypes, additionalProperties, mode,\n                        } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys,\n                            keyRequest: newRequest,\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                            importDisabled: (mode === 'MAPPED' || mode === 'CREATED'),\n                            mode,\n                        });\n                    } else {\n                        const selectedGrantTypes = [];\n                        if (selectdKM.availableGrantTypes.find((gt) => gt === 'password')) {\n                            selectedGrantTypes.push('password');\n                        }\n                        if (selectdKM.availableGrantTypes.find((gt) => gt === 'client_credentials')) {\n                            selectedGrantTypes.push('client_credentials');\n                        }\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes,\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    } else {\n                        Alert.error(error.description\n                            || intl.formatMessage({\n                                id: 'Shared.AppsAndKeys.TokenManager.get.keys.request.error',\n                                defaultMessage: 'Error while retrieving the keys',\n                            }));\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({\n                    keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes,\n                });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(error.description\n                    || `${intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                        defaultMessage: 'Error occurred when generating application keys',\n                    })}, ${error.response.body.message}`);\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body && response.body.message && response.body.description) {\n                    Alert.error(`${response.body.message}: ${response.body.description}`);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(error.description || intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status, response } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                if (response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(error.description || intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                        defaultMessage: 'Error occurred when providing application keys',\n                    }));\n                }\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    handleChange = (e) => {\n        this.setState({ tokenType: e.target.defaultValue });\n    }\n\n    handleClose=() => {\n        this.setState({ tokenType: 'DIRECT' });\n    }\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled }, isKeyManagerAllowed,\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled, mode, tokenType,\n        } = this.state;\n\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeyhandleCloses.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography variant='h5' component='h3'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km'\n                                defaultMessage='No Key Managers'\n                            />\n                        </Typography>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                defaultMessage='No Key Managers active to generate keys.'\n                            />\n                        </Typography>\n                    </InlineMessage>\n                </div>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab)\n            && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n\n        let isResidentKeyManagerTokensAvailable = false;\n        if (keys.has('Resident Key Manager')\n            && keys.get('Resident Key Manager').supportedGrantTypes\n            && keys.get('Resident Key Manager').supportedGrantTypes\n                .includes('urn:ietf:params:oauth:grant-type:token-exchange')) {\n            isResidentKeyManagerTokensAvailable = true;\n        }\n\n        let defaultTokenEndpoint;\n\n        if (keyManagers.length > 0) {\n            const residentKMs = keyManagers.filter((item) => item.name === 'Resident Key Manager');\n            defaultTokenEndpoint = residentKMs.length > 0 ? (residentKMs)[0].tokenEndpoint : null;\n        }\n\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <AppBar position='static' color='default'>\n                        <Tabs\n                            value={selectedTab}\n                            onChange={this.handleTabChange}\n                            indicatorColor='primary'\n                            textColor='primary'\n                            variant='scrollable'\n                            scrollButtons='auto'\n                            aria-label='scrollable auto tabs example'\n                        >\n                            {keyManagers.map((keymanager) => (\n                                <Tab\n                                    label={keymanager.displayName || keymanager.name}\n                                    value={keymanager.name}\n                                    disabled={!keymanager.enabled || (isKeyManagerAllowed\n                                    && !isKeyManagerAllowed(keymanager.name)\n                                    && ((keymanager.name !== 'Resident Key Manager')\n                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                    id={keymanager.name.replace(/\\s/g, '')}\n                                />\n                            ))}\n                        </Tabs>\n                    </AppBar>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <div>\n                            {keymanager.tokenType === 'DIRECT' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box display='flex' flexDirection='row'>\n                                        <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                            <FormattedMessage\n                                                defaultMessage='Key and Secret'\n                                                id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                            />\n                                        </Typography>\n                                        {keymanager.enableMapOAuthConsumerApps && (\n                                            <Box ml={2}>\n                                                <ImportExternalApp\n                                                    onChange={this.handleOnChangeProvidedOAuth}\n                                                    consumerKey={providedConsumerKey}\n                                                    consumerSecret={providedConsumerSecret}\n                                                    isUserOwner={isUserOwner}\n                                                    key={key}\n                                                    provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                    importDisabled={importDisabled}\n                                                />\n                                            </Box>\n                                        )}\n                                        {(keymanager.enableTokenGeneration && keys.get(selectedTab))\n                                            && (\n                                                mode !== 'MAPPED'\n                                                    ? (\n                                                        <Box ml={2}>\n                                                            <RemmoveKeys\n                                                                keys={keys}\n                                                                selectedTab={selectedTab}\n                                                                keyMappingId={keyMappingId}\n                                                                handleClickRemove={this.handleClickRemove}\n                                                            />\n                                                        </Box>\n                                                    ) : (\n                                                        <Box ml={2}>\n                                                            <CleanKeys\n                                                                keys={keys}\n                                                                selectedTab={selectedTab}\n                                                                keyMappingId={keyMappingId}\n                                                                handleClickRemove={this.handleClickRemove}\n                                                            />\n                                                        </Box>\n                                                    ))}\n                                    </Box>\n                                    <Box m={2}>\n                                        <ViewKeys\n                                            initialToken={initialToken}\n                                            initialValidityTime={initialValidityTime}\n                                            initialScopes={initialScopes}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            keys={keys}\n                                            selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                            isUserOwner={isUserOwner}\n                                            hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                            keyManagerConfig={keymanager}\n                                            mode={mode}\n                                            loadApplication={this.loadApplication}\n                                        />\n                                    </Box>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        {\n                                            key\n                                                ? (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configurations'\n                                                        id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                    />\n                                                )\n                                                : (\n                                                    <FormattedMessage\n                                                        defaultMessage='Key Configuration'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                    />\n                                                )\n                                        }\n                                    </Typography>\n                                    <Box m={2}>\n                                        <KeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                            mode={mode}\n                                        />\n                                        <div className={classes.generateWrapper}>\n                                            <ScopeValidation\n                                                resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                resourceMethod={resourceMethods.POST}\n                                            >\n                                                {!isUserOwner ? (\n                                                    <>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={\n                                                                key ? this.updateKeys : this.generateKeys\n                                                            }\n                                                            disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation\n                                                                || (isKeyManagerAllowed\n                                                                    && !isKeyManagerAllowed(keymanager.name)\n                                                                    && ((keymanager.name !== 'Resident Key Manager')\n                                                                    || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key\n                                                                ? this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update.keys',\n                                                                    defaultMessage: 'Update Keys',\n                                                                })\n                                                                : this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys',\n                                                                })}\n                                                            {isLoading && <CircularProgress size={20} />}\n                                                        </Button>\n                                                        <Typography variant='caption'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Only owner can generate or update keys'\n                                                                id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                            />\n                                                        </Typography>\n                                                    </>\n                                                ) : (\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            id='generate-keys'\n                                                            variant='contained'\n                                                            color='primary'\n                                                            className={classes.button}\n                                                            onClick={key ? this.updateKeys : this.generateKeys}\n                                                            disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || (mode && mode === 'MAPPED')\n                                                            || (isKeyManagerAllowed\n                                                                && !isKeyManagerAllowed(keymanager.name)\n                                                                && ((keymanager.name !== 'Resident Key Manager')\n                                                                || (!this.isTokenExchangeEnabled() && keymanager.name === 'Resident Key Manager')))}\n                                                        >\n                                                            {key\n                                                                ? this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.update',\n                                                                    defaultMessage: 'Update',\n                                                                })\n                                                                : this.props.intl.formatMessage({\n                                                                    id: 'Shared.AppsAndKeys.TokenManager.generate.keys',\n                                                                    defaultMessage: 'Generate Keys',\n                                                                })}\n                                                            {isLoading && <CircularProgress size={20} />}\n                                                        </Button>\n                                                        {!keymanager.enableOAuthAppCreation && (\n                                                            <Box m={2} display='flex'>\n                                                                <WarningIcon className={classes.warningIcon} />\n                                                                <Typography variant='body1'>\n                                                                    <FormattedMessage\n                                                                        defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                        id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                        values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                                    />\n                                                                </Typography>\n                                                            </Box>\n                                                        )}\n                                                    </Box>\n                                                )}\n                                            </ScopeValidation>\n                                        </div>\n\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'EXCHANGED' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                        <FormattedMessage\n                                            defaultMessage='Token Generation'\n                                            id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                        />\n                                    </Typography>\n                                    <Box m={2}>\n                                        {/*\n                                        Token exchange grant flow enable/disable logic\n                                        Given that in the key manager selected has the tokenType='EXCHANGE'\n                                            If 'Resident Key Manager' disabled we can't proceed with token exchange. So need to show a banner\n                                            If 'Resident Key Manager' enabled, we need to check if the resident key manager 'exchange grant' is selected.\n                                            So we need to ask the user to select 'exchange grant' for the 'Resident Key Manager'.\n                                            If 'Resident Key Manager' enabled and 'exchange grant' is enabled the token exchange is possible\n                                        */}\n                                        <TokenExchangeKeyConfiguration\n                                            keys={keys}\n                                            key={key}\n                                            selectedApp={selectedApp}\n                                            selectedTab={selectedTab}\n                                            keyType={keyType}\n                                            updateKeyRequest={this.updateKeyRequest}\n                                            keyRequest={keyRequest}\n                                            isUserOwner={isUserOwner}\n                                            isKeysAvailable={!!key}\n                                            keyManagerConfig={keymanager}\n                                            validating={validating}\n                                            updateHasError={this.updateHasError}\n                                            callbackError={hasError}\n                                            setValidating={this.setValidating}\n                                            defaultTokenEndpoint={defaultTokenEndpoint}\n                                        />\n                                    </Box>\n                                </TabPanel>\n                            )}\n                            {keymanager.tokenType === 'BOTH' && (\n                                <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                    <Box m={2}>\n                                        <Box m={2}>\n                                            <Box display='flex' alignItems='center'>\n                                                <Table className={classes.table}>\n                                                    <TableRow>\n                                                        <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                            <FormattedMessage\n                                                                defaultMessage='API Invocation Method'\n                                                                id='Shared.AppsAndKeys.KeyConfiguration.API Invocation.Method.label'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <RadioGroup\n                                                                style={{ flexDirection: 'row' }}\n                                                                aria-label='tokenType'\n                                                                name='tokenType'\n                                                                value={tokenType}\n                                                                onChange={this.handleChange}\n                                                            >\n                                                                <FormControlLabel\n                                                                    value='DIRECT'\n                                                                    control={<Radio />}\n                                                                    label='Direct Token'\n                                                                    id='direct-token'\n                                                                />\n                                                                <FormControlLabel\n                                                                    value='EXCHANGED'\n                                                                    control={<Radio />}\n                                                                    label='Exchange Token'\n                                                                    id='exchange-token'\n                                                                />\n                                                            </RadioGroup>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                </Table>\n                                            </Box>\n                                        </Box>\n\n                                        {tokenType === 'DIRECT' && (\n                                            <>\n                                                <Box display='flex' flexDirection='row'>\n                                                    <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                        <FormattedMessage\n                                                            defaultMessage='Key and Secret'\n                                                            id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                                        />\n                                                    </Typography>\n                                                    {\n                                                        keymanager.enableMapOAuthConsumerApps && (\n                                                            <Box ml={2}>\n                                                                <ImportExternalApp\n                                                                    onChange={this.handleOnChangeProvidedOAuth}\n                                                                    consumerKey={providedConsumerKey}\n                                                                    consumerSecret={providedConsumerSecret}\n                                                                    isUserOwner={isUserOwner}\n                                                                    key={key}\n                                                                    provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                                    importDisabled={importDisabled}\n                                                                />\n                                                            </Box>\n                                                        )\n                                                    }\n                                                </Box>\n                                                <Box m={2}>\n                                                    <ViewKeys\n                                                        initialToken={initialToken}\n                                                        initialValidityTime={initialValidityTime}\n                                                        initialScopes={initialScopes}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        keys={keys}\n                                                        selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                                        isUserOwner={isUserOwner}\n                                                        hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                                        keyManagerConfig={keymanager}\n                                                        mode={mode}\n                                                        loadApplication={this.loadApplication}\n                                                    />\n                                                </Box>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    {\n                                                        key\n                                                            ? (\n                                                                <FormattedMessage\n                                                                    defaultMessage='Key Configurations'\n                                                                    id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                                                />\n                                                            )\n                                                            : (\n                                                                <FormattedMessage\n                                                                    defaultMessage='Key Configuration'\n                                                                    id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                                                />\n                                                            )\n                                                    }\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <KeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                        selectedApp={selectedApp}\n                                                    />\n                                                    <div className={classes.generateWrapper}>\n                                                        <ScopeValidation\n                                                            resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                                            resourceMethod={resourceMethods.POST}\n                                                        >\n                                                            {!isUserOwner ? (\n                                                                <>\n                                                                    <Button\n                                                                        id='generate-keys'\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        className={classes.button}\n                                                                        onClick={\n                                                                            key ? this.updateKeys : this.generateKeys\n                                                                        }\n\n                                                                    >\n                                                                        {key ? 'Update keys' : 'Generate Keys'}\n                                                                        {isLoading && <CircularProgress size={20} />}\n                                                                    </Button>\n                                                                    <Typography variant='caption'>\n                                                                        <FormattedMessage\n                                                                            defaultMessage='Only owner can generate or update keys'\n                                                                            id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                                        />\n                                                                    </Typography>\n                                                                </>\n                                                            ) : (\n                                                                <Box display='flex'>\n                                                                    <Button\n                                                                        id='generate-keys'\n                                                                        variant='contained'\n                                                                        color='primary'\n                                                                        className={classes.button}\n                                                                        onClick={key ? this.updateKeys : this.generateKeys}\n\n                                                                    >\n                                                                        {key ? 'Update' : 'Generate Keys'}\n                                                                        {isLoading && <CircularProgress size={20} />}\n                                                                    </Button>\n                                                                    {!keymanager.enableOAuthAppCreation && (\n                                                                        <Box m={2} display='flex'>\n                                                                            <WarningIcon className={classes.warningIcon} />\n                                                                            <Typography variant='body1'>\n                                                                                <FormattedMessage\n                                                                                    defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                                    id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                                    values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                                                />\n                                                                            </Typography>\n                                                                        </Box>\n                                                                    )}\n                                                                </Box>\n                                                            )}\n                                                        </ScopeValidation>\n                                                    </div>\n                                                </Box>\n                                            </>\n                                        )}\n                                        {(tokenType === 'EXCHANGED' && isResidentKeyManagerTokensAvailable) && (\n                                            <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                                                <Typography className={classes.subTitle} variant='h6' component='h6'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Token Generation'\n                                                        id='Shared.AppsAndKeys.TokenManager.ExchangeToken.key.configuration'\n                                                    />\n                                                </Typography>\n                                                <Box m={2}>\n                                                    <TokenExchangeKeyConfiguration\n                                                        keys={keys}\n                                                        key={key}\n                                                        selectedApp={selectedApp}\n                                                        selectedTab={selectedTab}\n                                                        keyType={keyType}\n                                                        updateKeyRequest={this.updateKeyRequest}\n                                                        keyRequest={keyRequest}\n                                                        isUserOwner={isUserOwner}\n                                                        isKeysAvailable={!!key}\n                                                        keyManagerConfig={keymanager}\n                                                        validating={validating}\n                                                        updateHasError={this.updateHasError}\n                                                        callbackError={hasError}\n                                                        setValidating={this.setValidating}\n                                                        defaultTokenEndpoint={defaultTokenEndpoint}\n                                                        selectedApp={selectedApp}\n                                                    />\n                                                </Box>\n                                            </TabPanel>\n                                        )}\n                                    </Box>\n                                </TabPanel>\n                            )}\n                        </div>\n                    ))}\n\n                </div>\n                {(tokenType === 'EXCHANGED' && !isResidentKeyManagerTokensAvailable) && (\n                    <div className={classes.inputWrapper}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12}>\n                                <Dialog\n                                    fullScreen={false}\n                                    open\n                                    onClose={this.handleClose}\n                                    aria-labelledby='responsive-dialog-title'\n                                    className={classes.dialogWrapper}\n                                >\n                                    <DialogTitle id='responsive-dialog-title'>\n                                        {'Resident Key Manager Consumer Key and Secret Not Available '}\n                                    </DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText>\n                                            <>\n                                                <Typography>\n                                                    <FormattedMessage\n                                                        id='Shared.AppsAndKeys.ViewCurl.error'\n                                                        defaultMessage='Please generate the Consumer Key and Secret for Residence Key Manager with selecting the urn:ietf:params:oauth:grant-type:token-exchange grant type in\n                                                                            order to use the token Exchange Approach. '\n                                                    />\n                                                </Typography>\n                                            </>\n                                        </DialogContentText>\n                                    </DialogContent>\n                                    <DialogActions>\n\n                                        <Button onClick={this.handleClose} color='primary' autoFocus id='close-btn'>\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                                defaultMessage='Close'\n                                            />\n                                        </Button>\n                                    </DialogActions>\n                                </Dialog>\n                            </Grid>\n                        </Grid>\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                        id='start-key-gen-wizard-btn'\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You maRefactor code of AsyncApiUIy obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Paper, Typography } from '@material-ui/core';\nimport Link from '@material-ui/core/Link';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst OriginalDevportalDetails = (props) => {\n    const {\n        classes, originalDevPortalUrl,\n    } = props;\n    return (\n        <Paper elevation={0} className={classes.paper}>\n            <Typography variant='h5' component='h2'>\n                <FormattedMessage\n                    id={'Apis.Details.Credentials.OriginalDevportalDetails.'\n                    + 'original.developer.portal.title'}\n                    defaultMessage='Original Developer Portal'\n                />\n            </Typography>\n            <Link\n                target='_blank'\n                rel='noopener noreferrer'\n                href={originalDevPortalUrl}\n                variant='body2'\n            >\n                <div className={classes.originalDevPortalLink} data-testid='itest-original-devportal-link'>\n                    <FormattedMessage\n                        id='Apis.Details.Credentials.OriginalDevportalDetails.visit.original.developer.portal'\n                        defaultMessage='Visit Original Developer Portal'\n                    />\n                    <LaunchIcon className={classes.launchIcon} />\n                </div>\n            </Link>\n        </Paper>\n    );\n};\n\nexport default OriginalDevportalDetails;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link as MUILink } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete, isKeyManagerAllowed,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td} id={app.label}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <MUILink\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                            id={app.label + '-MA'}\n                            aria-labelledby={app.label + '-MA ' + app.label}\n                            component={Link}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </MUILink>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <MUILink\n                                className={classes.button}\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    handleSubscriptionDelete(\n                                        app.subscriptionId,\n                                        updateSubscriptionData,\n                                    );\n                                }}\n                                id={app.label + '-UN'}\n                                aria-labelledby={app.label + '-UN ' + app.label}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </MUILink>\n                        </ScopeValidation>\n                        <MUILink\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                            id={app.label + '-PK'}\n                            aria-labelledby={app.label + '-PK ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </MUILink>\n                        <MUILink\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                            id={app.label + '-SB'}\n                            aria-labelledby={app.label + '-SB ' + app.label}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </MUILink>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                isKeyManagerAllowed={isKeyManagerAllowed}\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport Link from '@material-ui/core/Link';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport OriginalDevportalDetails from './OriginalDevportalDetails';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        '& table > tr > th:last-child': {\n            textAlign: 'right',\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    launchIcon: {\n        paddingLeft: theme.spacing(1),\n    },\n    originalDevPortalLink: {\n        marginTop: theme.spacing(2),\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    /**\n     *Creates an instance of Credentials.\n     * @param JSON props\n     * @memberof Credentials\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            selectedAppId: false,\n            selectedKeyType: false,\n            subscriptionRequest: {\n                applicationId: '',\n                apiId: '',\n                throttlingPolicy: '',\n            },\n            throttlingPolicyList: [],\n            applicationOwner: '',\n            hashEnabled: false,\n            isSubscribing: false,\n        };\n        this.api = new Api();\n    }\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * used to check if key manager is in the allowed list for an API\n     * @param {*} name name of the key manager\n     * @memberof Credentials\n     */\n    isKeyManagerAllowed = (name) => {\n        const { api } = this.context;\n        return api && ((api.keyManagers && api.keyManagers.includes('all'))\n        || (api.keyManagers && api.keyManagers.includes(name)));\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2')\n        && !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2')\n         && !api.securityScheme.includes('api_key');\n        const isSetAllorResidentKeyManagers = (api.keyManagers && api.keyManagers.includes('all'))\n            || (api.keyManagers && api.keyManagers.includes('Resident Key Manager'));\n        const renderCredentialInfo = () => {\n            if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Apis.Details.Creadentials.credetials.mutualssl'\n                                defaultMessage={'Subscription is not required for Mutual SSL APIs'\n                                        + ' or APIs with only Basic Authentication.'}\n                            />\n                        </Typography>\n                    </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5' component='h2'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                component={RouterLink}\n                                                disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth || !isSetAllorResidentKeyManagers}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                    defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                />\n                                            </Button>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                                id='subscribe-to-api-btn'\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' component='h2' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table id='subscription-table'>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.action'}\n                                                    defaultMessage='Actions'\n                                                />\n                                            </th>\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={app.id}\n                                                loadInfo={this.loadInfo}\n                                                isKeyManagerAllowed={this.isKeyManagerAllowed}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={2}>\n                        <Grid item md={12}>\n                            {api.advertiseInfo && api.advertiseInfo.advertised\n                                && api.advertiseInfo.originalDevPortalUrl && (\n                                <OriginalDevportalDetails\n                                    classes={classes}\n                                    originalDevPortalUrl={api.advertiseInfo.originalDevPortalUrl}\n                                />\n                            )}\n                            {api.tiers.length > 0 ? (\n                                <>\n                                    <Typography\n                                        onClick={this.handleExpandClick}\n                                        variant='h4'\n                                        component='div'\n                                        className={classes.titleSub}\n                                    >\n                                        {applicationsAvailable.length > 0 && (\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                                className={classes.addLinkWrapper}\n                                                component={RouterLink}\n                                            >\n                                                <Button\n                                                    color='secondary'\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                    || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers}\n                                                    size='small'\n                                                    id='start-key-gen-wizard-btn'\n                                                >\n                                                    <Icon>add_circle_outline</Icon>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        )}\n                                    </Typography>\n                                    <Paper elevation={0} className={classes.paper}>\n                                        <Typography variant='body2' className={classes.descWrapper}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Credentials.Credentials.'\n                                                defaultMessage={`An application is primarily used to decouple the \n                                                consumer from the APIs. It allows you to generate and use a single \n                                                key for multiple APIs and subscribe multiple times to a single API \n                                                with different SLA levels.`}\n                                            />\n                                        </Typography>\n                                        {renderCredentialInfo()}\n                                    </Paper>\n                                </>\n                            ) : (\n                                <Paper elevation={0} className={classes.paper}>\n                                    <InlineMessage type='info' className={classes.dialogContainer}>\n                                        <Typography component='p' data-testid='itest-no-tier-dialog'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Creadentials.credetials.no.tiers'\n                                                defaultMessage='No tiers are available for the API.'\n                                            />\n                                        </Typography>\n                                    </InlineMessage>\n                                </Paper>\n                            )}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\nCredentials.contextType = ApiContext;\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}